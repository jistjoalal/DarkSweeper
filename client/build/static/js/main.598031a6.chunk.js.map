{"version":3,"sources":["components/Tile.js","components/TileGrid.js","components/HiddenToggle.js","components/Game.js","index.js","img/logo.svg"],"names":["Tile","_this$props","this","props","isRevealed","hasMine","nearby","flag","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","xray","theme","react_default","a","createElement","className","concat","onContextMenu","e","preventDefault","Tile_Over","Tile_Under","Component","Over","_ref","children","Tile_Flag","Under","_ref2","Tile_Mine","Tile_ColoredNumber","n","ColoredNumber","_ref3","Mine","src","logo","alt","Flag","range","Object","toConsumableArray","Array","keys","TileGrid","renderTileAt","i","j","_this$props$gridState","_this","gridState","isHighlighted","isR","hasM","nB","components_Tile","mouseDown","mouseUp","mouseEnter","mouseLeave","_this2","length","map","key","HiddenToggle","show","NEARBY_COORDS","Popup","components_HiddenToggle","text","score","time","onSubmit","submitHiscore","autoFocus","type","placeholder","value","onClick","closePopup","GameInfo","mines","hidden","flags","role","aria-label","href","target","Game","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","name","_this$state","state","console","log","newGame","scoreGrid","anyUB","anyUnrevealedBlank","anyUN","anyUnrevealedNumbers","reveal","any","forEach","row","tile","resetGrid","everyTile","changeTile","newGridState","_this$state2","nRows","nCols","chance","Math","random","gameStatus","buttons","highlightArea","xrayArea","setState","ignoreNextClick","button","_this$state3","includes","nearbyFlags","eachNearby","ix","jy","handleRightClick","handleClick","_this$state4","_this$state5","totalFlags","_gridState$i$j","flagChange","_this$state6","currentSize","clearInterval","timer","setInterval","tick","_this$state7","totalHidden","toggleTheme","newTheme","toggleInfo","infoOn","toggleXray","submitSize","blur","toggle","_gridState$i$j2","countNearby","nearbyMines","sum","callback","c","validTile","gridReduce","reducer","change","slice","assign","totalMines","_this$state8","min","max","onChange","parseInt","onKeyUp","step","parseFloat","components_TileGrid","Game_Popup","Game_GameInfo","_this$state9","toString","ReactDOM","render","src_components_Game","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.598031a6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport logo from '../img/logo.svg';\r\n\r\n// TODO\r\n// X-add flag toggle\r\nclass Tile extends Component {\r\n  render() {\r\n    const { isRevealed, hasMine, nearby, flag,\r\n      onMouseDown, onMouseUp, onMouseEnter, onMouseLeave,\r\n      xray, theme } = this.props;\r\n    \r\n    return (\r\n      <div className={`Tile-${theme}`}\r\n        onMouseDown={onMouseDown}\r\n        onMouseUp={onMouseUp}\r\n        onMouseEnter={onMouseEnter}\r\n        onMouseLeave={onMouseLeave}\r\n        onContextMenu={e => e.preventDefault()}\r\n      >\r\n        <Over isRevealed={isRevealed} flag={flag} xray={xray} theme={theme}>\r\n          <Under hasMine={hasMine} nearby={nearby} />\r\n        </Over>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// covers revealed tiles\r\nconst Over = ({ isRevealed, flag, children, xray, theme }) =>\r\n  isRevealed ? children :\r\n    <div className={`Cover-${theme}`}>\r\n      {flag ? <Flag /> : xray ? children : null}\r\n    </div>;\r\n  \r\n// whats underneath tile?\r\nconst Under = ({ hasMine, nearby }) =>\r\n  hasMine ? <Mine /> : <ColoredNumber n={nearby} />\r\n\r\n// minesweeper colors in the css!\r\nconst ColoredNumber = ({ n }) =>\r\n  <span className={`nearby${n}`}>\r\n    {n !== 0 ? n : null}\r\n  </span>;\r\n\r\nconst Mine = () => <img className=\"Mine\" src={logo} alt=\"X\" />;\r\n  \r\nconst Flag = () => <span className=\"Flag\">F</span>;\r\n\r\nexport default Tile;","import React, { Component } from 'react';\r\n\r\nimport Tile from './Tile';\r\n\r\nconst range = n => [...Array(n).keys()];\r\n\r\nclass TileGrid extends Component {\r\n  \r\n  render() {\r\n    const { gridState } = this.props;\r\n    if (gridState === null) { return null; }\r\n    return range(gridState.length).map((i) =>\r\n      <div key={i} className=\"Game-grid-row\">\r\n        {range(gridState[i].length).map((j) =>\r\n          <this.renderTileAt key={`${i},${j}`} i={i} j={j} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  renderTileAt = ({ i, j }) => {\r\n    const { isRevealed, hasMine, nearby, flag,\r\n      isHighlighted, xray } = this.props.gridState[i][j];\r\n    // display highlighted tiles as blank\r\n    const isR = isHighlighted ? true : isRevealed,\r\n          hasM = isHighlighted ? false : hasMine,\r\n          nB = isRevealed ? nearby : isHighlighted ? 0 : nearby;\r\n    return <Tile\r\n      isRevealed={isR}\r\n      hasMine={hasM}\r\n      nearby={nB}\r\n      flag={flag}\r\n      xray={xray || this.props.xray}\r\n      theme={this.props.theme}\r\n      onMouseDown={e => this.props.mouseDown(e, i, j)}\r\n      onMouseUp={e => this.props.mouseUp(e, i, j)}\r\n      onMouseEnter={e => this.props.mouseEnter(e, i, j)}\r\n      onMouseLeave={e => this.props.mouseLeave(e, i, j)}\r\n    />;\r\n  }\r\n}\r\n\r\nexport default TileGrid;","const HiddenToggle = props => {\r\n    if (props.show) {\r\n        return props.children;\r\n    }return null;\r\n};\r\n\r\nexport default HiddenToggle;","import React, {Component} from 'react';\r\n\r\nimport TileGrid from './TileGrid';\r\nimport HiddenToggle from './HiddenToggle';\r\nimport './Game.scss';\r\n\r\n// adjacent tiles\r\nconst NEARBY_COORDS = [\r\n  [-1, -1], [0, -1], [1, -1],\r\n  [-1, 0], /*[0, 0],*/ [1,0],\r\n  [-1, 1], [0, 1], [1,1]\r\n];\r\n// number range helper\r\nconst range = n => [...Array(n).keys()];\r\n// popup message\r\nconst Popup = props =>\r\n    <HiddenToggle show={props.show}>\r\n      <div className=\"Popup\" onContextMenu={e => e.preventDefault()}>\r\n        <div className=\"Popup-inner\">\r\n          <p>{props.text}</p>\r\n          \r\n          {props.text === 'Winner!' ?\r\n            <div className=\"Popup-score\">\r\n              <p>\r\n                Difficulty: {props.score} | Time: {props.time}\r\n              </p>\r\n              <form onSubmit={e => props.submitHiscore(e)}>\r\n                <input autoFocus className=\"Popup-name\" type=\"text\" placeholder=\"Name\" />\r\n                <input className=\"Popup-submit\" type=\"submit\" value=\"Submit\" />\r\n              </form>\r\n            </div>\r\n          : null}\r\n          \r\n          <button className=\"close\" onClick={props.closePopup}>Back</button>\r\n        </div>\r\n      </div>\r\n    </HiddenToggle>;\r\n// mines left, etc.\r\nconst GameInfo = ({ mines, flags, hidden, time }) =>\r\n  <div className=\"Game-info\">\r\n    <p>\r\n      <span role=\"img\" aria-label=\"bomb\">💣</span> {mines}\r\n      <span role=\"img\" aria-label=\"question\"> ❓</span> {hidden}\r\n      <span role=\"img\" aria-label=\"timer\"> ⏱</span> {time}\r\n    </p>\r\n    <p>\r\n      <span role=\"img\" aria-label=\"ok\">👌 </span>\r\n      Click around with right+left click for a safe start!\r\n    </p>\r\n    <p>\r\n      <span role=\"img\" aria-label=\"score\">💯 </span>\r\n      <a href=\"http://www.minesweeper.info/wiki/3BV\" target=\"blank\">\r\n        Difficulty = minimum # of left clicks to win\r\n      </a>\r\n    </p>\r\n    <p>\r\n      <span role=\"img\" aria-label=\"radioactive\">☢ </span>\r\n      Use middle click to xray (cheat) the area.\r\n    </p>\r\n  </div>;\r\n  \r\n\r\n// TODO\r\n// -bugs: \r\n//  X-change size b4 game starts timer, need currentSize state\r\n//  -chrome: button outline and popup looks weird\r\n// -setting flag doesnt work on mobile now (highlights numbers)\r\n// -win/lose animation/sound?\r\n// -timer store minutes?\r\n// -refactor\r\n// X-score based on 3BV\r\n// X-timer\r\n// X-adjust color theme w/ button\r\n// X-adjust size + chance\r\n// X-handle simultaneous click\r\n// X-remove style logic!\r\n// X-win\r\n// X-mines left\r\n// X-manage state correctly\r\n// X-handle right click\r\n// X-game over\r\nclass Game extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // grid\r\n      nRows: 10,\r\n      nCols: 10,\r\n      currentSize: {nRows: 10, nCols: 10},\r\n      chance: 0.1,\r\n      gridState: null,\r\n      // info\r\n      totalMines: 0,\r\n      totalFlags: 0,\r\n      totalHidden: 100,\r\n      gameStatus: 'Loading',\r\n      time: 0,\r\n      score: 0,\r\n      // menu\r\n      theme: 'dark',\r\n      xray: false,\r\n      infoOn: false,\r\n      // internal\r\n      ignoreNextClick: false\r\n    };\r\n  }\r\n  \r\n  render() {\r\n    const { gameStatus, gridState, nRows, nCols, chance,\r\n      totalMines, totalFlags, totalHidden,\r\n      xray, infoOn, theme, time, score } = this.state;\r\n      \r\n    return (\r\n      <div className=\"Game\">\r\n      \r\n        <div className=\"Game-menu\">\r\n          \r\n          <div>\r\n          <button className=\"Game-button\" onClick={this.newGame}>\r\n            New Game\r\n          </button>\r\n          \r\n          <button\r\n            className={`Game-button${infoOn ? ' toggle' : ''}`}\r\n            onClick={this.toggleInfo}\r\n          >Game Info\r\n          </button>\r\n          \r\n          <button \r\n            className={`Game-button${xray ? ' toggle' : ''}`}\r\n            onClick={this.toggleXray}\r\n          >X-RAY\r\n          </button>\r\n          \r\n          <button className={`Game-button${theme === 'light' ? ' toggle' : ''}`}\r\n            onClick={this.toggleTheme}\r\n          >Theme\r\n          </button>\r\n          </div>\r\n          \r\n          <div>\r\n            <input className=\"Game-input\"\r\n              type=\"number\" value={nCols} min={1} max={100}\r\n              onChange={e =>\r\n                this.setState({ nCols: parseInt(e.target.value)})\r\n              }\r\n              onKeyUp={e => this.submitSize(e)}/>\r\n            x<input className=\"Game-input\"\r\n              type=\"number\" value={nRows} min={1} max={100}\r\n              onChange={e =>\r\n                this.setState({ nRows: parseInt(e.target.value)})\r\n              }\r\n              onKeyUp={e => this.submitSize(e)}/>\r\n            x<input className=\"Game-input\"\r\n              type=\"number\" value={chance} min={0} max={1.0} step={0.01}\r\n              onChange={e =>\r\n                this.setState({ chance: parseFloat(e.target.value)})\r\n              }\r\n              onKeyUp={e => this.submitSize(e)}/>\r\n          </div>\r\n          \r\n        </div>\r\n        \r\n        <div className=\"Game-grid\">\r\n        \r\n          <TileGrid\r\n            gridState={gridState}\r\n            xray={xray}\r\n            theme={theme}\r\n            mouseDown={this.mouseDown}\r\n            mouseUp={this.mouseUp}\r\n            mouseEnter={this.mouseEnter}\r\n            mouseLeave={this.mouseLeave}\r\n          />\r\n          \r\n          <Popup show={gameStatus !== 'Playing'} text={gameStatus}\r\n            submitHiscore={this.submitHiscore} score={score} time={time}\r\n            closePopup={this.newGame}/>\r\n          \r\n        </div>\r\n        \r\n        {infoOn ?\r\n        <GameInfo\r\n          mines={totalMines} flags={totalFlags} hidden={totalHidden} time={time}\r\n        /> : null}\r\n        \r\n      </div>\r\n    );\r\n  }\r\n  \r\n  submitHiscore = e => {\r\n    e.preventDefault();\r\n    const name = e.target[0].value;\r\n    const { score, time } = this.state;\r\n    console.log(name, score, time);\r\n    this.newGame();\r\n  }\r\n  \r\n  componentDidMount() {\r\n    this.newGame();\r\n  }\r\n  \r\n  componentDidUpdate() {\r\n    const { totalHidden, totalMines, currentSize,\r\n      nRows, nCols, gameStatus, gridState } = this.state;\r\n    \r\n    // new game = calculate nearby numbers, total mines, and reset game\r\n    if (gameStatus === 'New Game') {\r\n      this.countNearby();\r\n      this.setState({\r\n        totalMines: this.gridReduce((i, j) =>\r\n          gridState[i][j].hasMine ? 1 : 0),\r\n        totalFlags: 0,\r\n        totalHidden: nRows * nCols,\r\n        time: 0,\r\n        score: 0,\r\n        gameStatus: 'Playing'\r\n      });\r\n    }\r\n    \r\n    // update totalhidden\r\n    if (gameStatus === 'Calculating') {\r\n      this.setState({\r\n        totalHidden: this.gridReduce((i, j) =>\r\n          gridState[i][j].isRevealed ? 0 : 1),\r\n        gameStatus: 'Playing'\r\n      });\r\n    }\r\n    \r\n    // win condition\r\n    if (totalHidden === totalMines) {\r\n      // total mines is set to string to prevent infinite loop\r\n      // and still appear the same\r\n      console.log(currentSize);\r\n      this.setState({ gameStatus: 'Scoring',\r\n      totalMines: totalMines.toString() });\r\n      // reset grid for scoring\r\n      clearInterval(this.timer);\r\n      this.resetGrid();\r\n    }\r\n    \r\n    if (gameStatus === 'Scoring') {\r\n      this.setState({\r\n        gameStatus: 'Winner!',\r\n        score: this.scoreGrid()\r\n      });\r\n    }\r\n  }\r\n  \r\n  scoreGrid = () => {\r\n    const anyUB = this.anyUnrevealedBlank();\r\n    const anyUN = this.anyUnrevealedNumbers();\r\n    // if any unrevealed blank tile, reveal\r\n    if (anyUB) {\r\n      this.reveal(anyUB.i, anyUB.j);\r\n      return 1 + this.scoreGrid();\r\n    }\r\n    // else if any unrevealed numbers, reveal\r\n    else if (anyUN) {\r\n      this.reveal(anyUN.i, anyUN.j);\r\n      return 1 + this.scoreGrid();\r\n    }\r\n    // else save score\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n  \r\n  anyUnrevealedNumbers = () => {\r\n    const { gridState } = this.state;\r\n    let any = false;\r\n    gridState.forEach((row, i) => {\r\n      row.forEach((tile, j) => {\r\n        if (!tile.isRevealed && !tile.hasMine) {\r\n          any = {i, j};\r\n        }\r\n      })\r\n    })\r\n    return any;\r\n  }\r\n  \r\n  anyUnrevealedBlank = () => {\r\n    const { gridState } = this.state;\r\n    let any = false;\r\n    gridState.forEach((row, i) => {\r\n      row.forEach((tile, j) => {\r\n        if (tile.nearby === 0 && !tile.isRevealed && !tile.hasMine) {\r\n          any = {i, j};\r\n        }\r\n      })\r\n    })\r\n    return any;\r\n  }\r\n  \r\n  resetGrid = () => {\r\n    this.everyTile((i, j) => \r\n      this.changeTile(i, j, { isRevealed: false, flag: false }))\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n  \r\n  // Grid State = 2d array of tile states\r\n  // - nearby is the # of nearby mines\r\n  newGridState = () => {\r\n    const { nRows, nCols, chance } = this.state;\r\n    return range(nRows).map(i => range(nCols).map(j => {\r\n      return {\r\n        isRevealed: false,\r\n        hasMine: Math.random() < chance,\r\n        nearby: 0,\r\n        flag: false,\r\n        isHighlighted: false,\r\n        xray: false\r\n      };\r\n    }));\r\n  }\r\n  \r\n  /*\r\n    Mouse\r\n  */\r\n  \r\n  mouseEnter = (e, i, j) => {\r\n    const { gameStatus } = this.state;\r\n    if (gameStatus !== 'Playing') { return; }\r\n    // \"both\" down\r\n    if (e.buttons === 3) { this.highlightArea(i, j, true); }\r\n    // middle down\r\n    if (e.buttons === 4) { this.xrayArea(i, j, true); }\r\n  }\r\n  \r\n  mouseLeave = (e, i, j) => {\r\n    // \"both\" down\r\n    if (e.buttons === 3) { this.highlightArea(i, j, false); }\r\n    // middle down\r\n    if (e.buttons === 4) { this.xrayArea(i, j, false); }\r\n  }\r\n  \r\n  mouseDown = (e, i, j) => {\r\n    e.preventDefault(); // prevents click-drag to highlight text\r\n    const { gameStatus } = this.state;\r\n    if (gameStatus !== 'Playing') { return; }\r\n    // \"both\" down\r\n    if (e.buttons === 3) {\r\n      this.setState({ ignoreNextClick: true });\r\n      this.highlightArea(i, j, true);\r\n    }\r\n    // middle down\r\n    if (e.button === 1) { this.xrayArea(i, j, true); }\r\n  }\r\n  \r\n  mouseUp = (e, i, j) => {\r\n    const { ignoreNextClick, gridState } = this.state;\r\n    // \"both\" up\r\n    if ([1,2].includes(e.buttons)) {\r\n      this.setState({ ignoreNextClick: true });\r\n      this.highlightArea(i, j, false);\r\n      // if nearby mines == nearby flags, reveal this + nearby tiles\r\n      // - !hasMine makes simultaneous click safe!\r\n      if (gridState[i][j].nearby === this.nearbyFlags(i, j)\r\n        && !gridState[i][j].hasMine)\r\n      {\r\n        this.reveal(i, j);\r\n        this.eachNearby(i, j, (ix, jy) => {\r\n          this.reveal(ix, jy);\r\n        });\r\n      }\r\n      return;\r\n    }\r\n    // middle up\r\n    if (e.button === 1) { this.xrayArea(i, j, false); }\r\n    // left up\r\n    else if (e.button === 0 && !ignoreNextClick) {\r\n      this.handleClick(i, j);\r\n    }// right up\r\n    else if (e.button === 2 && !ignoreNextClick) {\r\n      this.handleRightClick(i, j);\r\n    }\r\n    this.setState({ ignoreNextClick: false });\r\n  }\r\n \r\n  // left click to reveal tile or lose!\r\n  handleClick = (i, j) => {\r\n    const { gridState, gameStatus } = this.state;\r\n    const { flag } = gridState[i][j];\r\n    \r\n    // ignore clicks if game is over or tile is flagged\r\n    if (gameStatus !== 'Playing' || flag) { return; }\r\n    \r\n    // reveal clicked tile\r\n    this.reveal(i, j);\r\n  }\r\n  \r\n  // right click to set flag\r\n  handleRightClick = (i, j) => {\r\n    const { gridState, gameStatus, totalFlags } = this.state;\r\n    const { isRevealed, flag } = gridState[i][j];\r\n   \r\n    // ignore clicks if game is over or tile revealed\r\n    if (gameStatus !== 'Playing' || isRevealed) { return; }\r\n    \r\n    // toggle flag\r\n    this.changeTile(i, j, { flag: !flag });\r\n    \r\n    // increment total flags\r\n    const flagChange = !flag ? 1 : -1;\r\n    this.setState({ totalFlags: totalFlags + flagChange });\r\n  }\r\n  \r\n  /*\r\n    Game Config\r\n */\r\n  \r\n  newGame = () => {\r\n    const { nRows, nCols } = this.state; \r\n    this.setState({\r\n      gridState: this.newGridState(), \r\n      gameStatus: 'New Game',\r\n      currentSize: {nRows, nCols}\r\n    });\r\n    clearInterval(this.timer);\r\n    this.timer = setInterval(() => this.tick(), 1000);\r\n  }\r\n  \r\n  tick = () => {\r\n    const { totalHidden, gameStatus, currentSize } = this.state;\r\n    const { nRows, nCols } = currentSize;\r\n    if (totalHidden !== nRows * nCols && gameStatus === 'Playing') {\r\n      this.setState({time: this.state.time + 1});\r\n    }\r\n  }\r\n  \r\n  toggleTheme = () => {\r\n    const { theme } = this.state;\r\n    const newTheme = theme === 'dark' ? 'light' : 'dark';\r\n    this.setState({ theme: newTheme });\r\n  }\r\n  \r\n  toggleInfo = () => {\r\n    const { infoOn } = this.state;\r\n    this.setState({ infoOn: !infoOn });\r\n  }\r\n  \r\n  // see the path to victory!\r\n  toggleXray = () => {\r\n    this.setState({ xray: !this.state.xray });\r\n  }\r\n  \r\n  submitSize = e => {\r\n    if (e.key === 'Enter') {\r\n      e.target.blur();\r\n      this.newGame();\r\n    }\r\n  }\r\n  \r\n  /*\r\n    Meat\r\n  */\r\n  \r\n  xrayArea = (i, j, toggle) => {\r\n    this.changeTile(i, j, { xray: toggle });\r\n    this.eachNearby(i, j, (ix, jy) => {\r\n      this.changeTile(ix, jy, { xray: toggle });\r\n    })\r\n  }\r\n  \r\n  highlightArea = (i, j, toggle) => {\r\n    const { gridState } = this.state;\r\n    // highlight self + nearby unflagged tiles\r\n    this.changeTile(i, j, { isHighlighted: toggle })\r\n    this.eachNearby(i, j, (ix, jy) => {\r\n      if (!gridState[ix][jy].flag) {\r\n        this.changeTile(ix, jy, { isHighlighted: toggle });\r\n      }\r\n    })\r\n  }\r\n  \r\n  // revealed tiles that have 0 nearby mines reveal adjacent tiles\r\n  reveal = (i, j) => {\r\n    const { gridState } = this.state;\r\n    const { nearby, hasMine, flag } = gridState[i][j];\r\n    \r\n    // recursion break\r\n    if (gridState[i][j].isRevealed || flag) { return 0; }\r\n\r\n    // check mine\r\n    if (hasMine) {\r\n      this.changeTile(i, j, {isRevealed: true});\r\n      return this.setState({ gameStatus: 'Game Over'});\r\n    }\r\n    \r\n    // reveal tile\r\n    this.changeTile(i, j, {isRevealed: true});\r\n    \r\n    // this will trigger recount of totalHidden in componentDidUpdate\r\n    this.setState({ gameStatus: 'Calculating' });\r\n    \r\n    // recursively clear adjacent tiles if 0 nearby\r\n    if (nearby === 0 && !hasMine) {\r\n      this.eachNearby(i, j, (ix, jy) => {\r\n        this.reveal(ix, jy);\r\n      });\r\n    }\r\n  }\r\n  \r\n  // calculates nearby mines for every tile\r\n  countNearby = () => {\r\n    this.everyTile((i, j) =>\r\n      this.changeTile(i, j, { nearby: this.nearbyMines(i, j) }));\r\n  }\r\n  \r\n  // returns # of mines nearby tile @ (i, j)\r\n  nearbyMines = (i, j) => {\r\n    const { gridState } = this.state;\r\n    let sum = 0;\r\n    this.eachNearby(i, j, (ix, jy) =>\r\n      sum += gridState[ix][jy].hasMine ? 1 : 0);\r\n    return sum;\r\n  }\r\n  \r\n  // returns # of flags nearby tile @ (i, j)\r\n  nearbyFlags = (i, j) => {\r\n    const { gridState } = this.state;\r\n    let sum = 0;\r\n    this.eachNearby(i, j, (ix, jy) =>\r\n      sum += gridState[ix][jy].flag ? 1 : 0);\r\n    return sum;\r\n  }\r\n  \r\n  // runs callback on each nearby tile that exists\r\n  eachNearby = (i, j, callback) => {\r\n    NEARBY_COORDS.forEach(c => {\r\n      const ix = i + c[0],\r\n            jy = j + c[1];\r\n      if (this.validTile(ix, jy)) {\r\n        callback(ix, jy);\r\n      }\r\n    });\r\n  }\r\n  \r\n  // 2d array summing thing\r\n  gridReduce = reducer => {\r\n    let sum = 0;\r\n    this.everyTile((i, j) =>\r\n      sum += reducer(i, j));\r\n    return sum;\r\n  }\r\n  \r\n  // assign change to tile @ (i, j)\r\n  changeTile = (i, j, change) => {\r\n    const gridState = this.state.gridState.slice();\r\n    Object.assign(gridState[i][j], change);\r\n    this.setState({ gridState });\r\n  }\r\n  \r\n  // callback to 2d array\r\n  everyTile = callback =>\r\n    this.state.gridState.map((row, i) => row.map((tile, j) => callback(i, j)))\r\n  \r\n  // boolean if tile exists at i,j coords\r\n  validTile = (i, j) =>\r\n    typeof this.state.gridState[i] === 'undefined' ? false :\r\n      typeof this.state.gridState[i][j] !== 'undefined'\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Game from './components/Game';\r\n\r\nReactDOM.render(<Game />, document.getElementById('root'));\r\n\r\nif (module.hot) {\r\n    module.hot.accept();\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.eed724ad.svg\";"],"sourceRoot":""}