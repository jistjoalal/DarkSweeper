{"version":3,"sources":["components/Tile.js","components/TileGrid.js","components/HiddenToggle.js","components/Game.js","index.js","img/logo.svg"],"names":["Tile","_this$props","this","props","isRevealed","hasMine","nearby","flag","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","xray","theme","react_default","a","createElement","className","concat","onContextMenu","e","preventDefault","Tile_Over","Tile_Under","Component","Over","_ref","children","Tile_Flag","Under","_ref2","Tile_Mine","Tile_ColoredNumber","n","ColoredNumber","_ref3","Mine","src","logo","alt","Flag","range","Object","toConsumableArray","Array","keys","TileGrid","renderTileAt","i","j","_this$props$gridState","_this","gridState","isHighlighted","isR","hasM","nB","components_Tile","mouseDown","mouseUp","mouseEnter","mouseLeave","_this2","length","map","key","HiddenToggle","show","NEARBY_COORDS","Popup","components_HiddenToggle","text","score","time","onSubmit","submitHiscore","autoFocus","type","placeholder","value","onClick","closePopup","GameInfo","mines","hidden","flags","role","aria-label","href","target","Game","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","name","_this$state","state","console","log","newGame","scoreGrid","anyUB","anyUnrevealedBlank","anyUN","anyUnrevealedNumbers","reveal","any","forEach","row","tile","resetGrid","everyTile","changeTile","newGridState","_this$state2","nRows","nCols","chance","Math","random","gameStatus","buttons","highlightArea","xrayArea","setState","ignoreNextClick","button","_this$state3","includes","nearbyFlags","eachNearby","ix","jy","handleRightClick","handleClick","_this$state4","_this$state5","totalFlags","_gridState$i$j","flagChange","clearInterval","timer","setInterval","tick","_this$state6","totalHidden","toggleTheme","newTheme","toggleInfo","infoOn","toggleXray","submitSize","blur","toggle","_gridState$i$j2","countNearby","nearbyMines","sum","callback","c","validTile","gridReduce","reducer","change","slice","assign","totalMines","_this$state7","min","onChange","parseInt","onKeyUp","step","parseFloat","components_TileGrid","Game_Popup","Game_GameInfo","_this$state8","toString","ReactDOM","render","src_components_Game","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.761e35a1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport logo from '../img/logo.svg';\n\n// TODO\n// X-add flag toggle\nclass Tile extends Component {\n  render() {\n    const { isRevealed, hasMine, nearby, flag,\n      onMouseDown, onMouseUp, onMouseEnter, onMouseLeave,\n      xray, theme } = this.props;\n    \n    return (\n      <div className={`Tile-${theme}`}\n        onMouseDown={onMouseDown}\n        onMouseUp={onMouseUp}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        onContextMenu={e => e.preventDefault()}\n      >\n        <Over isRevealed={isRevealed} flag={flag} xray={xray} theme={theme}>\n          <Under hasMine={hasMine} nearby={nearby} />\n        </Over>\n      </div>\n    );\n  }\n}\n\n// covers revealed tiles\nconst Over = ({ isRevealed, flag, children, xray, theme }) =>\n  isRevealed ? children :\n    <div className={`Cover-${theme}`}>\n      {flag ? <Flag /> : xray ? children : null}\n    </div>;\n  \n// whats underneath tile?\nconst Under = ({ hasMine, nearby }) =>\n  hasMine ? <Mine /> : <ColoredNumber n={nearby} />\n\n// minesweeper colors in the css!\nconst ColoredNumber = ({ n }) =>\n  <span className={`nearby${n}`}>\n    {n !== 0 ? n : null}\n  </span>;\n\nconst Mine = () => <img className=\"Mine\" src={logo} alt=\"X\" />;\n  \nconst Flag = () => <span className=\"Flag\">F</span>;\n\nexport default Tile;","import React, { Component } from 'react';\n\nimport Tile from './Tile';\n\nconst range = n => [...Array(n).keys()];\n\nclass TileGrid extends Component {\n  \n  render() {\n    const { gridState } = this.props;\n    if (gridState === null) { return null; }\n    return range(gridState.length).map((i) =>\n      <div key={i} className=\"Game-grid-row\">\n        {range(gridState[i].length).map((j) =>\n          <this.renderTileAt key={`${i},${j}`} i={i} j={j} />\n        )}\n      </div>\n    );\n  }\n  \n  renderTileAt = ({ i, j }) => {\n    const { isRevealed, hasMine, nearby, flag,\n      isHighlighted, xray } = this.props.gridState[i][j];\n    // display highlighted tiles as blank\n    const isR = isHighlighted ? true : isRevealed,\n          hasM = isHighlighted ? false : hasMine,\n          nB = isRevealed ? nearby : isHighlighted ? 0 : nearby;\n    return <Tile\n      isRevealed={isR}\n      hasMine={hasM}\n      nearby={nB}\n      flag={flag}\n      xray={xray || this.props.xray}\n      theme={this.props.theme}\n      onMouseDown={e => this.props.mouseDown(e, i, j)}\n      onMouseUp={e => this.props.mouseUp(e, i, j)}\n      onMouseEnter={e => this.props.mouseEnter(e, i, j)}\n      onMouseLeave={e => this.props.mouseLeave(e, i, j)}\n    />;\n  }\n}\n\nexport default TileGrid;","const HiddenToggle = props => {\n    if (props.show) {\n        return props.children;\n    }return null;\n};\n\nexport default HiddenToggle;","import React, {Component} from 'react';\n\nimport TileGrid from './TileGrid';\nimport HiddenToggle from './HiddenToggle';\nimport './Game.scss';\n\n// adjacent tiles\nconst NEARBY_COORDS = [\n  [-1, -1], [0, -1], [1, -1],\n  [-1, 0], /*[0, 0],*/ [1,0],\n  [-1, 1], [0, 1], [1,1]\n];\n// number range helper\nconst range = n => [...Array(n).keys()];\n// popup message\nconst Popup = props =>\n    <HiddenToggle show={props.show}>\n      <div className=\"Popup\" onContextMenu={e => e.preventDefault()}>\n        <div className=\"Popup-inner\">\n          <p>{props.text}</p>\n          \n          {props.text === 'Winner!' ?\n            <div className=\"Popup-score\">\n              <p>\n                Difficulty: {props.score} | Time: {props.time}\n              </p>\n              <form onSubmit={e => props.submitHiscore(e)}>\n                <input autoFocus className=\"Popup-name\" type=\"text\" placeholder=\"Name\" />\n                <input className=\"Popup-submit\" type=\"submit\" value=\"Submit\" />\n              </form>\n            </div>\n          : null}\n          \n          <button className=\"close\" onClick={props.closePopup}>Back</button>\n        </div>\n      </div>\n    </HiddenToggle>;\n// mines left, etc.\nconst GameInfo = ({ mines, flags, hidden, time }) =>\n  <div className=\"Game-info\">\n    <p>\n      <span role=\"img\" aria-label=\"bomb\">💣</span> {mines}\n      <span role=\"img\" aria-label=\"question\"> ❓</span> {hidden}\n      <span role=\"img\" aria-label=\"timer\"> ⏱</span> {time}\n    </p>\n    <p>\n      <span role=\"img\" aria-label=\"ok\">👌 </span>\n      Click around with right+left click for a safe start!\n    </p>\n    <p>\n      <span role=\"img\" aria-label=\"score\">💯 </span>\n      <a href=\"http://www.minesweeper.info/wiki/3BV\" target=\"blank\">\n        Difficulty = minimum # of left clicks to win\n      </a>\n    </p>\n    <p>\n      <span role=\"img\" aria-label=\"radioactive\">☢ </span>\n      Use middle click to xray (cheat) the area.\n    </p>\n  </div>;\n  \n\n// TODO\n// -fix bug: change size b4 game starts timer, need firstMoveMade state\n//  -maybe set the change size to scale automatically + start new game?\n// -setting flag doesnt work on mobile now (highlights numbers)\n// -win/lose animation/sound?\n// -timer store minutes?\n// -refactor\n// X-score based on 3BV\n// X-timer\n// X-adjust color theme w/ button\n// X-adjust size + chance\n// X-handle simultaneous click\n// X-remove style logic!\n// X-win\n// X-mines left\n// X-manage state correctly\n// X-handle right click\n// X-game over\nclass Game extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      // grid\n      nRows: 10,\n      nCols: 10,\n      chance: 0.1,\n      gridState: null,\n      // info\n      totalMines: 0,\n      totalFlags: 0,\n      totalHidden: 100,\n      gameStatus: 'Loading',\n      time: 0,\n      score: 0,\n      // menu\n      theme: 'dark',\n      xray: false,\n      infoOn: false,\n      // internal\n      ignoreNextClick: false\n    };\n  }\n  \n  render() {\n    const { gameStatus, gridState, nRows, nCols, chance,\n      totalMines, totalFlags, totalHidden,\n      xray, infoOn, theme, time, score } = this.state;\n      \n    return (\n      <div className=\"Game\">\n      \n        <div className=\"Game-menu\">\n          \n          <div>\n          <button className=\"Game-button\" onClick={this.newGame}>\n            New Game\n          </button>\n          \n          <button\n            className={`Game-button${infoOn ? ' toggle' : ''}`}\n            onClick={this.toggleInfo}\n          >Game Info\n          </button>\n          \n          <button \n            className={`Game-button${xray ? ' toggle' : ''}`}\n            onClick={this.toggleXray}\n          >X-RAY\n          </button>\n          \n          <button className={`Game-button${theme === 'light' ? ' toggle' : ''}`}\n            onClick={this.toggleTheme}\n          >Theme\n          </button>\n          </div>\n          \n          <div>\n            <input className=\"Game-input\"\n              type=\"number\" value={nCols} min={1}\n              onChange={e =>\n                this.setState({ nCols: parseInt(e.target.value)})\n              }\n              onKeyUp={e => this.submitSize(e)}/>\n            x<input className=\"Game-input\"\n              type=\"number\" value={nRows} min={1}\n              onChange={e =>\n                this.setState({ nRows: parseInt(e.target.value)})\n              }\n              onKeyUp={e => this.submitSize(e)}/>\n            x<input className=\"Game-input\"\n              type=\"number\" value={chance} min={0} step={0.01}\n              onChange={e =>\n                this.setState({ chance: parseFloat(e.target.value)})\n              }\n              onKeyUp={e => this.submitSize(e)}/>\n          </div>\n          \n        </div>\n        \n        <div className=\"Game-grid\">\n        \n          <TileGrid\n            gridState={gridState}\n            xray={xray}\n            theme={theme}\n            mouseDown={this.mouseDown}\n            mouseUp={this.mouseUp}\n            mouseEnter={this.mouseEnter}\n            mouseLeave={this.mouseLeave}\n          />\n          \n          <Popup show={gameStatus !== 'Playing'} text={gameStatus}\n            submitHiscore={this.submitHiscore} score={score} time={time}\n            closePopup={this.newGame}/>\n          \n        </div>\n        \n        {infoOn ?\n        <GameInfo\n          mines={totalMines} flags={totalFlags} hidden={totalHidden} time={time}\n        /> : null}\n        \n      </div>\n    );\n  }\n  \n  submitHiscore = e => {\n    e.preventDefault();\n    const name = e.target[0].value;\n    const { score, time } = this.state;\n    console.log(name, score, time);\n    this.newGame();\n  }\n  \n  componentDidMount() {\n    this.newGame();\n  }\n  \n  componentDidUpdate() {\n    const { totalHidden, totalMines,\n      nRows, nCols, gameStatus, gridState } = this.state;\n    \n    // new game = calculate nearby numbers, total mines, and reset game\n    if (gameStatus === 'New Game') {\n      this.countNearby();\n      this.setState({\n        totalMines: this.gridReduce((i, j) =>\n          gridState[i][j].hasMine ? 1 : 0),\n        totalFlags: 0,\n        totalHidden: nRows * nCols,\n        time: 0,\n        score: 0,\n        gameStatus: 'Playing'\n      });\n    }\n    \n    // update totalhidden\n    if (gameStatus === 'Calculating') {\n      this.setState({\n        totalHidden: this.gridReduce((i, j) =>\n          gridState[i][j].isRevealed ? 0 : 1),\n        gameStatus: 'Playing'\n      });\n    }\n    \n    // win condition\n    if (totalHidden === totalMines) {\n      // total mines is set to string to prevent infinite loop\n      // and still appear the same\n      this.setState({ gameStatus: 'Scoring',\n      totalMines: totalMines.toString() });\n      // reset grid for scoring\n      clearInterval(this.timer);\n      this.resetGrid();\n    }\n    \n    if (gameStatus === 'Scoring') {\n      this.setState({\n        gameStatus: 'Winner!',\n        score: this.scoreGrid()\n      });\n    }\n  }\n  \n  scoreGrid = () => {\n    const anyUB = this.anyUnrevealedBlank();\n    const anyUN = this.anyUnrevealedNumbers();\n    // if any unrevealed blank tile, reveal\n    if (anyUB) {\n      this.reveal(anyUB.i, anyUB.j);\n      return 1 + this.scoreGrid();\n    }\n    // else if any unrevealed numbers, reveal\n    else if (anyUN) {\n      this.reveal(anyUN.i, anyUN.j);\n      return 1 + this.scoreGrid();\n    }\n    // else save score\n    else {\n      return 0;\n    }\n  }\n  \n  anyUnrevealedNumbers = () => {\n    const { gridState } = this.state;\n    let any = false;\n    gridState.forEach((row, i) => {\n      row.forEach((tile, j) => {\n        if (!tile.isRevealed && !tile.hasMine) {\n          any = {i, j};\n        }\n      })\n    })\n    return any;\n  }\n  \n  anyUnrevealedBlank = () => {\n    const { gridState } = this.state;\n    let any = false;\n    gridState.forEach((row, i) => {\n      row.forEach((tile, j) => {\n        if (tile.nearby === 0 && !tile.isRevealed && !tile.hasMine) {\n          any = {i, j};\n        }\n      })\n    })\n    return any;\n  }\n  \n  resetGrid = () => {\n    this.everyTile((i, j) => \n      this.changeTile(i, j, { isRevealed: false, flag: false }))\n  }\n  \n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n  \n  // Grid State = 2d array of tile states\n  // - nearby is the # of nearby mines\n  newGridState = () => {\n    const { nRows, nCols, chance } = this.state;\n    return range(nRows).map(i => range(nCols).map(j => {\n      return {\n        isRevealed: false,\n        hasMine: Math.random() < chance,\n        nearby: 0,\n        flag: false,\n        isHighlighted: false,\n        xray: false\n      };\n    }));\n  }\n  \n  /*\n    Mouse\n  */\n  \n  mouseEnter = (e, i, j) => {\n    const { gameStatus } = this.state;\n    if (gameStatus !== 'Playing') { return; }\n    // \"both\" down\n    if (e.buttons === 3) { this.highlightArea(i, j, true); }\n    // middle down\n    if (e.buttons === 4) { this.xrayArea(i, j, true); }\n  }\n  \n  mouseLeave = (e, i, j) => {\n    // \"both\" down\n    if (e.buttons === 3) { this.highlightArea(i, j, false); }\n    // middle down\n    if (e.buttons === 4) { this.xrayArea(i, j, false); }\n  }\n  \n  mouseDown = (e, i, j) => {\n    e.preventDefault(); // prevents click-drag to highlight text\n    const { gameStatus } = this.state;\n    if (gameStatus !== 'Playing') { return; }\n    // \"both\" down\n    if (e.buttons === 3) {\n      this.setState({ ignoreNextClick: true });\n      this.highlightArea(i, j, true);\n    }\n    // middle down\n    if (e.button === 1) { this.xrayArea(i, j, true); }\n  }\n  \n  mouseUp = (e, i, j) => {\n    const { ignoreNextClick, gridState } = this.state;\n    // \"both\" up\n    if ([1,2].includes(e.buttons)) {\n      this.setState({ ignoreNextClick: true });\n      this.highlightArea(i, j, false);\n      // if nearby mines == nearby flags, reveal this + nearby tiles\n      // - !hasMine makes simultaneous click safe!\n      if (gridState[i][j].nearby === this.nearbyFlags(i, j)\n        && !gridState[i][j].hasMine)\n      {\n        this.reveal(i, j);\n        this.eachNearby(i, j, (ix, jy) => {\n          this.reveal(ix, jy);\n        });\n      }\n      return;\n    }\n    // middle up\n    if (e.button === 1) { this.xrayArea(i, j, false); }\n    // left up\n    else if (e.button === 0 && !ignoreNextClick) {\n      this.handleClick(i, j);\n    }// right up\n    else if (e.button === 2 && !ignoreNextClick) {\n      this.handleRightClick(i, j);\n    }\n    this.setState({ ignoreNextClick: false });\n  }\n \n  // left click to reveal tile or lose!\n  handleClick = (i, j) => {\n    const { gridState, gameStatus } = this.state;\n    const { flag } = gridState[i][j];\n    \n    // ignore clicks if game is over or tile is flagged\n    if (gameStatus !== 'Playing' || flag) { return; }\n    \n    // reveal clicked tile\n    this.reveal(i, j);\n  }\n  \n  // right click to set flag\n  handleRightClick = (i, j) => {\n    const { gridState, gameStatus, totalFlags } = this.state;\n    const { isRevealed, flag } = gridState[i][j];\n   \n    // ignore clicks if game is over or tile revealed\n    if (gameStatus !== 'Playing' || isRevealed) { return; }\n    \n    // toggle flag\n    this.changeTile(i, j, { flag: !flag });\n    \n    // increment total flags\n    const flagChange = !flag ? 1 : -1;\n    this.setState({ totalFlags: totalFlags + flagChange });\n  }\n  \n  /*\n    Game Config\n  */\n  \n  newGame = () => {\n    this.setState({gridState: this.newGridState(), gameStatus: 'New Game' });\n    clearInterval(this.timer);\n    this.timer = setInterval(() => this.tick(), 1000);\n  }\n  \n  tick = () => {\n    const { totalHidden, nRows, nCols, gameStatus } = this.state;\n    if (totalHidden !== nRows * nCols && gameStatus === 'Playing') {\n      this.setState({time: this.state.time + 1});\n    }\n  }\n  \n  toggleTheme = () => {\n    const { theme } = this.state;\n    const newTheme = theme === 'dark' ? 'light' : 'dark';\n    this.setState({ theme: newTheme });\n  }\n  \n  toggleInfo = () => {\n    const { infoOn } = this.state;\n    this.setState({ infoOn: !infoOn });\n  }\n  \n  // see the path to victory!\n  toggleXray = () => {\n    this.setState({ xray: !this.state.xray });\n  }\n  \n  submitSize = e => {\n    if (e.key === 'Enter') {\n      e.target.blur();\n      this.newGame();\n    }\n  }\n  \n  /*\n    Meat\n  */\n  \n  xrayArea = (i, j, toggle) => {\n    this.changeTile(i, j, { xray: toggle });\n    this.eachNearby(i, j, (ix, jy) => {\n      this.changeTile(ix, jy, { xray: toggle });\n    })\n  }\n  \n  highlightArea = (i, j, toggle) => {\n    const { gridState } = this.state;\n    // highlight self + nearby unflagged tiles\n    this.changeTile(i, j, { isHighlighted: toggle })\n    this.eachNearby(i, j, (ix, jy) => {\n      if (!gridState[ix][jy].flag) {\n        this.changeTile(ix, jy, { isHighlighted: toggle });\n      }\n    })\n  }\n  \n  // revealed tiles that have 0 nearby mines reveal adjacent tiles\n  reveal = (i, j) => {\n    const { gridState } = this.state;\n    const { nearby, hasMine, flag } = gridState[i][j];\n    \n    // recursion break\n    if (gridState[i][j].isRevealed || flag) { return 0; }\n\n    // check mine\n    if (hasMine) {\n      this.changeTile(i, j, {isRevealed: true});\n      return this.setState({ gameStatus: 'Game Over'});\n    }\n    \n    // reveal tile\n    this.changeTile(i, j, {isRevealed: true});\n    \n    // this will trigger recount of totalHidden in componentDidUpdate\n    this.setState({ gameStatus: 'Calculating' });\n    \n    // recursively clear adjacent tiles if 0 nearby\n    if (nearby === 0 && !hasMine) {\n      this.eachNearby(i, j, (ix, jy) => {\n        this.reveal(ix, jy);\n      });\n    }\n  }\n  \n  // calculates nearby mines for every tile\n  countNearby = () => {\n    this.everyTile((i, j) =>\n      this.changeTile(i, j, { nearby: this.nearbyMines(i, j) }));\n  }\n  \n  // returns # of mines nearby tile @ (i, j)\n  nearbyMines = (i, j) => {\n    const { gridState } = this.state;\n    let sum = 0;\n    this.eachNearby(i, j, (ix, jy) =>\n      sum += gridState[ix][jy].hasMine ? 1 : 0);\n    return sum;\n  }\n  \n  // returns # of flags nearby tile @ (i, j)\n  nearbyFlags = (i, j) => {\n    const { gridState } = this.state;\n    let sum = 0;\n    this.eachNearby(i, j, (ix, jy) =>\n      sum += gridState[ix][jy].flag ? 1 : 0);\n    return sum;\n  }\n  \n  // runs callback on each nearby tile that exists\n  eachNearby = (i, j, callback) => {\n    NEARBY_COORDS.forEach(c => {\n      const ix = i + c[0],\n            jy = j + c[1];\n      if (this.validTile(ix, jy)) {\n        callback(ix, jy);\n      }\n    });\n  }\n  \n  // 2d array summing thing\n  gridReduce = reducer => {\n    let sum = 0;\n    this.everyTile((i, j) =>\n      sum += reducer(i, j));\n    return sum;\n  }\n  \n  // assign change to tile @ (i, j)\n  changeTile = (i, j, change) => {\n    const gridState = this.state.gridState.slice();\n    Object.assign(gridState[i][j], change);\n    this.setState({ gridState });\n  }\n  \n  // callback to 2d array\n  everyTile = callback =>\n    this.state.gridState.map((row, i) => row.map((tile, j) => callback(i, j)))\n  \n  // boolean if tile exists at i,j coords\n  validTile = (i, j) =>\n    typeof this.state.gridState[i] === 'undefined' ? false :\n      typeof this.state.gridState[i][j] !== 'undefined'\n}\n\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/Game';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\nif (module.hot) {\n    module.hot.accept();\n}\n","module.exports = __webpack_public_path__ + \"static/media/logo.932fdead.svg\";"],"sourceRoot":""}